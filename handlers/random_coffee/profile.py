"""
Random Coffee Profile

Handlers for creating and updating user profiles for Random Coffee.
"""

# --------------------------------------------------------------------------------

import logging
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config.settings import TOKEN
from database.models import RandomCoffeeProfile, RandomCoffeeWeek
from database.req.random_coffee import get_user_profile
from handlers.states import ProfileStates
from keyboards.random_coffee.base import (
    get_city_keyboard,
    get_meeting_goal_keyboard,
    get_meeting_format_keyboard,
    get_profile_edit_keyboard,
    get_weekly_participation_keyboard,
    cancel_weekly_participation_keyboard
)
from utils.random_coffee.helpers import (
    get_profile_text,
    validate_birth_date,
    get_week_start_date
)

# --------------------------------------------------------------------------------

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML,
    ),
)

router = Router()
logger = logging.getLogger(__name__)


# --------------------------------------------------------------------------------

@router.message(Command("random_coffee"))
@router.message(F.text == "‚òï –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Random Coffee")
async def cmd_random_coffee(message: Message, state: FSMContext, session: AsyncSession):
    """
    Handle the /random_coffee command and manage user participation.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context for the user.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        profile = await get_user_profile(session, message.from_user.id)

        if profile:
            current_week = get_week_start_date()
            existing_participation = await session.scalar(
                select(RandomCoffeeWeek).where(
                    RandomCoffeeWeek.user_id == message.from_user.id,
                    RandomCoffeeWeek.week_start == current_week.isoformat(),
                )
            )

            if existing_participation:
                if existing_participation.is_participating:
                    await message.answer(
                        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ Random Coffee –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.",
                        reply_markup=cancel_weekly_participation_keyboard()
                    )
                    return
                else:
                    await message.answer(
                        text="–í—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Random Coffee –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",
                        reply_markup=get_weekly_participation_keyboard()
                    )
            else:
                await message.answer(
                    text="–í—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Random Coffee –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ?",
                    reply_markup=get_weekly_participation_keyboard()
                )
        else:
            await message.answer(
                "–°–∫–æ—Ä–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–∞—Ä.\n"
                "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ –≤—Å—Ç—Ä–µ—á–∞–º, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤—ã—à–µ –∏ –∑–∞–≤–µ—Ä—à–∏ –∞–Ω–∫–µ—Ç—É."
            )
            await message.answer(
                "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7.\n"
                "‚òïÔ∏è <b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b> –ù–∞–ø–∏—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é."
            )
            await state.set_state(ProfileStates.waiting_for_full_name)

    except Exception as e:
        logger.error(f"Error in cmd_random_coffee: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


# --------------------------------------------------------------------------------

async def update_user(
        message: Message | CallbackQuery,
        session: AsyncSession,
        state: FSMContext,
        key,
        value
):
    """
    Update a specific field in the user's profile.

    Args:
        message (Message | CallbackQuery): Incoming Telegram message.
        session (AsyncSession): Database session.
        state (FSMContext): FSM state context.
        key (str): Profile field name.
        value (str): New value for the field.

    Returns:
        None
    """
    profile = await get_user_profile(session, message.from_user.id)
    setattr(profile, key, value)
    await session.commit()

    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await state.clear()


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    Process full name input and advance to city question.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "full_name", message.text)
            return

        await state.update_data(full_name=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 7.\n"
            "üìç <b>–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?</b> –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç.\n\n"
            "–í—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –º–æ–∂–µ—Ç–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö - —Ç–æ–≥–¥–∞ –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç "
            "–æ–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏. –ê –µ—Å–ª–∏ –≤—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤–∂–∏–≤—É—é!",
            reply_markup=get_city_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_city)

    except Exception as e:
        logger.error(f"Error in process_full_name: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.callback_query(F.data.startswith("city_"))
async def process_city(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    Process selected city or ask for custom input.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        city_type = callback.data.split("_")[1]

        if city_type == "other":
            await callback.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:"
            )
            await state.set_state(ProfileStates.waiting_for_custom_city)
        else:
            city_map = {'spb': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 'moscow': '–ú–æ—Å–∫–≤–∞'}
            city = city_map.get(city_type, city_type)
            data = await state.get_data()
            if data.get("editing_profile"):
                await update_user(callback, session, state, "city", city)
                return

            await state.update_data(city=city)
            await callback.message.answer(
                "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 7.\n"
                "üë®‚Äçüíª –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ <b>–ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö</b>, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ—à—å.\n\n"
                "–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –æ —Å–µ–±–µ –∏–ª–∏ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–≤—å—é - "
                "—á—Ç–æ-—Ç–æ, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –∑–∞–æ—á–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –¥–æ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏."
            )
            await state.set_state(ProfileStates.waiting_for_social)

        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_city: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_custom_city)
async def process_custom_city(message: Message, state: FSMContext, session: AsyncSession):
    """
    Handle custom city input from user.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "city", message.text)
            return

        await state.update_data(city=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 7.\n"
            "üë®‚Äçüíª –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ <b>–ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö</b>, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–Ω–æ –≤–µ–¥–µ—à—å.\n\n"
            "–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –æ —Å–µ–±–µ –∏–ª–∏ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–≤—å—é - "
            "—á—Ç–æ-—Ç–æ, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –∑–∞–æ—á–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –¥–æ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏."
        )
        await state.set_state(ProfileStates.waiting_for_social)
    except Exception as e:
        logger.error(f"Error in process_custom_city: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_social)
async def process_social(message: Message, state: FSMContext, session: AsyncSession):
    """
    Save user's social link and ask for occupation.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "social_links", message.text)
            return

        await state.update_data(social_links=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 4 –∏–∑ 7.\n"
            "üë®‚Äçüíª <b>–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ç–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è.</b>"
        )
        await state.set_state(ProfileStates.waiting_for_occupation)
    except Exception as e:
        logger.error(f"Error in process_social: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_occupation)
async def process_occupation(message: Message, state: FSMContext, session: AsyncSession):
    """
    Save user's occupation and ask for hobbies.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "occupation", message.text)
            return

        await state.update_data(occupation=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 5 –∏–∑ 7.\n"
            "üëÄ <b>–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Ö–æ–±–±–∏?</b>"
        )
        await state.set_state(ProfileStates.waiting_for_hobbies)
    except Exception as e:
        logger.error(f"Error in process_occupation: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_hobbies)
async def process_hobbies(message: Message, state: FSMContext, session: AsyncSession):
    """
    Save user's hobbies and ask for birth date.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "hobbies", message.text)
            return

        await state.update_data(hobbies=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 6 –∏–∑ 7.\n"
            "üìÜ <b>–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.</b>"
        )
        await state.set_state(ProfileStates.waiting_for_birth_date)
    except Exception as e:
        logger.error(f"Error in process_hobbies: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.message(ProfileStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext, session: AsyncSession):
    """
    Validate and save birth date, then ask for meeting goal.

    Args:
        message (Message): Incoming Telegram message.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        if not validate_birth_date(message.text):
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return

        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(message, session, state, "birth_date", message.text)
            return

        await state.update_data(birth_date=message.text)
        await message.answer(
            "–í–æ–ø—Ä–æ—Å 7 –∏–∑ 7.\n"
            "‚öñÔ∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ Random Coffee –≤—Å—Ç—Ä–µ—á–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ "
            "–¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–≤–µ—Å—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —É—Å–ª–æ–≤–Ω–æ –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ "
            "<b>–ø–æ–ª—å–∑–æ–π</b>. –ê –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫—Ä—É–≥–æ–∑–æ—Ä–∞, –Ω–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π –∏ "
            "–æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ, –Ω–∞–∑–æ–≤–µ–º —ç—Ç–æ <b>—Ñ–∞–Ω</b>. "
            "<b>–ö–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ?</b>",
            reply_markup=get_meeting_goal_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_goal)
    except Exception as e:
        logger.error(f"Error in process_birth_date: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.callback_query(F.data.startswith("goal_"))
async def process_goal(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    Process user-selected meeting goal and proceed to format selection.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        goal_map = {
            "10-90": "10% —Ñ–∞–Ω / 90% –ø–æ–ª—å–∑–∞",
            "30-70": "30% —Ñ–∞–Ω / 70% –ø–æ–ª—å–∑–∞",
            "50-50": "50% —Ñ–∞–Ω / 50% –ø–æ–ª—å–∑–∞",
            "70-30": "70% —Ñ–∞–Ω / 30% –ø–æ–ª—å–∑–∞",
            "90-10": "90% —Ñ–∞–Ω / 10% –ø–æ–ª—å–∑–∞"
        }

        goal = goal_map[callback.data.split("_")[1]]

        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(callback, session, state, "meeting_goal", goal)
            return

        await state.update_data(meeting_goal=goal)
        await callback.message.answer(
            "‚òï –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —É—Å–ø–µ–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ–π, "
            "–æ—Ç–º–µ—Ç—å –Ω–∏–∂–µ, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö–æ—á–µ—à—å –µ–µ –ø—Ä–æ–≤–µ—Å—Ç–∏: –≤–∂–∏–≤—É—é –∏–ª–∏ –æ–Ω–ª–∞–π–Ω?\n\n"
            "–ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å \"–≤–∂–∏–≤—É—é\", –±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞, "
            "–∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –æ—Ñ—Ñ–ª–∞–π–Ω, –∏ –ø—Ä–∏—à–ª—ë—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø–∞—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ "
            "—É–¥–∞—Å—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
            reply_markup=get_meeting_format_keyboard()
        )
        await state.set_state(ProfileStates.waiting_for_format)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_goal: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# --------------------------------------------------------------------------------

@router.callback_query(F.data.startswith("format_"))
async def process_format(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    Save selected meeting format and finalize profile creation.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM state context.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        format_map = {
            "online": "–û–Ω–ª–∞–π–Ω",
            "offline": "–í–∂–∏–≤—É—é"
        }
        format_type = format_map[callback.data.split("_")[1]]

        data = await state.get_data()
        if data.get("editing_profile"):
            await update_user(callback, session, state, "meeting_format", format_type)
            return

        data["meeting_format"] = format_type

        profile = RandomCoffeeProfile(
            user_id=callback.from_user.id,
            **data
        )
        session.add(profile)

        week_start = get_week_start_date()
        participation = RandomCoffeeWeek(
            user_id=callback.from_user.id,
            week_start=week_start.isoformat(),
            is_participating=True,
            created_at=datetime.now().isoformat()
        )
        session.add(participation)

        await session.commit()

        await callback.message.answer(
            "<b>–ü–æ–ª—É—á–∏–ª–æ—Å—å!</b>ü§≤\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã - —É—á–∞—Å—Ç–Ω–∏–∫ –≤—Å—Ç—Ä–µ—á Random Coffee‚òï\n\n"
            "–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–µ—Ä–µ—à–ª–µ–º —Ç–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É:\n‚è¨"
        )
        await callback.message.answer(
            get_profile_text(profile) + "\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit_profile"
        )
        await callback.message.answer("–•–æ—Ä–æ—à–∏—Ö –≤—Å—Ç—Ä–µ—á! ‚òïÔ∏è")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_format: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


# --------------------------------------------------------------------------------

@router.message(Command("edit_profile"))
async def cmd_edit_profile(message: Message, session: AsyncSession):
    """
    Handle /edit_profile command and display editable profile data.

    Args:
        message (Message): Incoming Telegram message.
        session (AsyncSession): Database session.

    Returns:
        None
    """
    try:
        profile = await get_user_profile(session, message.from_user.id)

        if not profile:
            await message.answer(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã Random Coffee. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random_coffee –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."
            )
            return

        text = (
                get_profile_text(profile)
                + "\n----------------\n"
                + f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {profile.birth_date}\n"
                + f"<b>–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏:</b> {profile.meeting_format}\n\n"
                + "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )

        await message.answer(
            text,
            reply_markup=get_profile_edit_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in cmd_edit_profile: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


# --------------------------------------------------------------------------------

@router.callback_query(F.data.startswith("edit_"))
async def process_profile_edit(callback: CallbackQuery, state: FSMContext):
    """
    Process profile edit command and set appropriate state.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM state context.

    Returns:
        None
    """
    try:
        field = callback.data.split("_")[1]
        await state.update_data(editing_profile=True)

        if field == "fullname":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
            await state.set_state(ProfileStates.waiting_for_full_name)
        elif field == "city":
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
                reply_markup=get_city_keyboard()
            )
            await state.set_state(ProfileStates.waiting_for_city)
        elif field == "social":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:")
            await state.set_state(ProfileStates.waiting_for_social)
        elif field == "occupation":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            await state.set_state(ProfileStates.waiting_for_occupation)
        elif field == "hobbies":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ö–æ–±–±–∏:")
            await state.set_state(ProfileStates.waiting_for_hobbies)
        elif field == "birth_date":
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            await state.set_state(ProfileStates.waiting_for_birth_date)
        elif field == "goal":
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:",
                reply_markup=get_meeting_goal_keyboard()
            )
            await state.set_state(ProfileStates.waiting_for_goal)
        elif field == "format":
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á:",
                reply_markup=get_meeting_format_keyboard()
            )
            await state.set_state(ProfileStates.waiting_for_format)

        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_profile_edit: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
