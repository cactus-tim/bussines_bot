import base64
from aiogram.utils.deep_linking import create_start_link, decode_payload
import requests
from aiogram.filters import Command, CommandStart
from aiogram import Router, F
from aiogram.filters.command import CommandObject
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import urllib.parse

from handlers.error import safe_send_message, make_short_link
from bot_instance import bot
from database.req import get_user, create_user, create_user_x_event_row, update_user, get_all_user_events, get_event, \
    update_user_x_event_row_status, update_reg_event, check_completly_reg_event, create_reg_event, get_reg_event, \
    get_user_x_event_row, get_ref_give_away, create_ref_give_away, delete_user_x_event_row, delete_ref_give_away_row, \
    get_all_hosts_in_event_ids, get_host, add_money, one_more_event, get_user_rank_by_money, get_top_10_users_by_money, \
    add_referal_cnt, update_strick, add_user_to_networking
from keyboards.keyboards import single_command_button_keyboard, events_ikb, yes_no_ikb, yes_no_hse_ikb, get_ref_ikb, \
    top_ikb
from handlers.quest import start

router = Router()


class EventReg(StatesGroup):
    waiting_name = State()
    waiting_surname = State()
    waiting_fathername = State()
    waiting_mail = State()
    waiting_phone = State()
    waiting_org = State()


give_away_ids = {1568674379: 'hsespbcareer',
                 1426453089: '–ö–æ–ª—è–Ω–∞',
                 483458201: 'Me. Only for tests'}


mmsg = """
ü•û –í—Å—Ç—Ä–µ—á–∞ —Å —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º ¬´–¢–µ—Ä–µ–º–∫–∞¬ª –≤ –ù–ò–£ –í–®–≠

üìé –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è:

‚Ä¢ –ö–∞–∫ —Å –Ω—É–ª—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —Å –º–Ω–æ–≥–æ–º–∏–ª–ª–∏–∞—Ä–¥–Ω—ã–º –æ–±–æ—Ä–æ—Ç–æ–º?
‚Ä¢ –ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ ¬´–¢–µ—Ä–µ–º–æ–∫¬ª —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞?
‚Ä¢ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–º–æ–≥–ª–∏ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –≤—ã—Å–æ–∫–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥–µ?
‚Ä¢ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ–π —á–µ—Ä–µ–∑ –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ–º—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏? 

üìÖ 4 –¥–µ–∫–∞–±—Ä—è –≤ 18:00

üìç –ù–ò–£ –í–®–≠, –ö–∞–Ω—Ç–µ–º–∏—Ä–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞, 3–∫1, –∞—É–¥. 436

–í—Å—è –¥–∞–ª—å–Ω–µ–π—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @HSE_SPB_Business_Club
"""


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    hash_value = command.args  # TODO: after 04_12 event hash_value = decode_payload(command.args)
    user = await get_user(message.from_user.id)
    if hash_value:
        if hash_value == 'networking':
            if user == "not created":
                user = await create_user(message.from_user.id,
                                  {'handler': message.from_user.username, 'first_contact': hash_value})
            flag = await add_user_to_networking(message.from_user.id)
            if not flag:
                await safe_send_message(bot, message.from_user.id, '–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–µ')
            else:
                await safe_send_message(bot, message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–µ')
            await bot.delete_message(message.from_user.id, message.message_id-1)
        elif hash_value[:3] == 'reg':
            if user == "not created":
                user = await create_user(message.from_user.id,
                                  {'handler': message.from_user.username, 'first_contact': hash_value[4:]})
            await safe_send_message(bot, message.from_user.id,
                                    text=mmsg,
                                    reply_markup=single_command_button_keyboard())
            event_name = hash_value.split('_')[1] + '_' + hash_value.split('_')[2] + '_' + hash_value.split('_')[3]
            user_x_event = await get_user_x_event_row(message.from_user.id, event_name)
            if user_x_event == 'not created':
                await create_user_x_event_row(message.from_user.id, event_name, hash_value.split('_')[-1])
                event = await get_event(event_name)
                if event == 'not created':
                    await safe_send_message(bot, message, '–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..')
                await state.update_data({'name': event_name})
                await safe_send_message(bot, message, f'–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event.desc},'
                                                      f'–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç {event.date} –≤ {event.time}', reply_markup=yes_no_ikb())
            else:
                await safe_send_message(bot, message, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=get_ref_ikb(event_name))
        elif hash_value[:3] == 'ref':
            if hash_value[3] == '_':
                event_part, user_id = hash_value.split("__")
                event_name = event_part.replace("ref_", "")
                user_id = int(user_id)
                if user == "not created":
                    user = await create_user(message.from_user.id,
                                      {'handler': message.from_user.username, 'first_contact': str(user_id)})
                await safe_send_message(bot, message.from_user.id,
                                        text=mmsg,
                                        reply_markup=single_command_button_keyboard())
                user_x_event = await get_user_x_event_row(message.from_user.id, event_name)
                if user_x_event == 'not created':
                    await create_user_x_event_row(message.from_user.id, event_name, str(user_id))
                    event = await get_event(event_name)
                    if event == 'not created':
                        await safe_send_message(bot, message, '–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..')
                    await state.update_data({'name': event_name})
                    await safe_send_message(bot, message, f'–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event.desc},'
                                                          f'–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç {event.date} –≤ {event.time}',
                                            reply_markup=yes_no_ikb())
                    hosts_ids = await get_all_hosts_in_event_ids(event_name)
                    if hosts_ids and user_id in hosts_ids:
                        ref_give_away = await get_ref_give_away(message.from_user.id, event_name)
                        if not ref_give_away:
                            await create_ref_give_away(message.from_user.id, event_name, user_id)
                            host = await get_host(user_id, event_name)
                            await safe_send_message(bot, message,
                                                    f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ @{host.org_name}')
                        else:
                            await safe_send_message(bot, message, '–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —á—å–µ–º —Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ')
                    await safe_send_message(bot, user_id, f"–ü–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ–∞–ª—å–Ω–æ–π —Å—Å–ª—ã–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"
                                                          f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}!")
                else:
                    await safe_send_message(bot, message, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=get_ref_ikb(event_name))
        elif hash_value == 'otbor':
            if user == "not created":
                user = await create_user(message.from_user.id,
                                  {'handler': message.from_user.username, 'first_contact': hash_value})
            name = message.from_user.first_name if message.from_user.first_name else message.from_user.username
            await safe_send_message(bot, message, f'–ü—Ä–∏–≤–µ—Ç, {name}!', reply_markup=single_command_button_keyboard())
            await start(message)
        else:
            if user == "not created":
                user = await create_user(message.from_user.id,
                                  {'handler': message.from_user.username, 'first_contact': hash_value})
                name = message.from_user.first_name if message.from_user.first_name else message.from_user.username
                await safe_send_message(bot, message.from_user.id,
                                        text=f"{name}, –ø—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã HSE SPB Business Club üéâ\n\n"
                                             "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ "
                                             "–æ—Ç–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É"
                                             "–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω—Å—ã "
                                             "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö.\n\n"
                                             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏: —Ç–∞–∫ —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –Ω–∏ "
                                             "–æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ"
                                             "—Å–æ–±—ã—Ç–∏–µ –∫–ª—É–±–∞.\n\n"
                                             "–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å Telegram-–∫–∞–Ω–∞–ª, –≥–¥–µ –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ "
                                             "–ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É"
                                             "–±–∏–∑–Ω–µ—Å–∞.\n"
                                             "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @HSE_SPB_Business_Club",
                                        reply_markup=single_command_button_keyboard())
            row = await update_user_x_event_row_status(message.from_user.id, hash_value, 'been')
            if not row:
                await create_user_x_event_row(message.from_user.id, hash_value, '0')
                row = await update_user_x_event_row_status(message.from_user.id, hash_value, 'been')
            await add_money(message.from_user.id, 1)
            await one_more_event(message.from_user.id)
            await update_strick(message.from_user.id)
            ref_giver = await get_user(int(row.first_contact))
            await safe_send_message(bot, message, text="QR-–∫–æ–¥ —É–¥–∞—á–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!",
                                    reply_markup=single_command_button_keyboard())
            hosts_ids = await get_all_hosts_in_event_ids(hash_value)
            if (not hosts_ids and ref_giver != 'not created') or (hosts_ids and ref_giver != 'not created' and ref_giver.id not in hosts_ids):
                await safe_send_message(bot, ref_giver.id, f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏—à–ª–∞—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ —á–µ–ª–æ–≤–µ–∫ @{user.handler} –ø–æ—Å–µ—Ç–∏–ª —Å–æ–±—ã—Ç–∏–µ!')
                await add_money(ref_giver.id, 2)
                await add_referal_cnt(ref_giver.id)
                await safe_send_message(bot, message.from_user.id, f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –º–æ–Ω–µ—Ç–∫—É –∑–∞ —Ç–æ —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ @{ref_giver.handler}!')
                await add_money(message.from_user.id, 1)
    else:
        if user == "not created":
            await create_user(message.from_user.id, {'handler': message.from_user.username})
        name = message.from_user.first_name if message.from_user.first_name else message.from_user.username
        await safe_send_message(bot, message, text=f"{name}, –ø—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã HSE SPB Business Club üéâ\n\n"
                                                   "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö, –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É "
                                                   "–∏ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±, –∞ —Ç–∞–∫–∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω—Å—ã "
                                                   "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö.\n\n"
                                                   "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏: —Ç–∞–∫ —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –Ω–∏ –æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ "
                                                   "—Å–æ–±—ã—Ç–∏–µ –∫–ª—É–±–∞.\n\n"
                                                   "–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å Telegram-–∫–∞–Ω–∞–ª, –≥–¥–µ –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É "
                                                   "–±–∏–∑–Ω–µ—Å–∞.\n"
                                                   "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @HSE_SPB_Business_Club",
                                reply_markup=single_command_button_keyboard())
    await safe_send_message(bot, message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö')
    # TODO: to del after bets


@router.callback_query(F.data == "event_no")
async def reg_event_part0_5(callback: CallbackQuery, state: FSMContext):
    await safe_send_message(bot, callback, "–≠—Ç–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ((", reply_markup=single_command_button_keyboard())
    data = await state.get_data()
    event_name = data.get('name')
    row = await get_user_x_event_row(callback.from_user.id, event_name)
    if row != "not created":
        await delete_user_x_event_row(callback.from_user.id, event_name)
    row = await get_ref_give_away(callback.from_user.id, event_name)
    if row:
        await delete_ref_give_away_row(callback.from_user.id, event_name)
    await state.clear()


@router.callback_query(F.data == "event_yes")
async def reg_event_part1(callback: CallbackQuery, state: FSMContext):
    await safe_send_message(bot, callback, "–í—ã —Å—Ç—É–¥–µ–Ω—Ç/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ù–ò–£ –í–®–≠?", reply_markup=yes_no_hse_ikb())


@router.callback_query(F.data == "hse_yes")
async def reg_event_part1_5(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    event = await get_event(name)
    await safe_send_message(bot, callback, f"–ú—ã –≤–∞—Å –∂–¥–µ–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {event.desc}, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç {event.date} –≤ {event.time}\n"
                                                f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ - {event.place}\n\n", reply_markup=get_ref_ikb(name))
    await state.clear()


@router.callback_query(F.data == "hse_no")
async def reg_event_part2(callback: CallbackQuery, state: FSMContext):
    reg_event = await get_reg_event(callback.from_user.id)
    if not reg_event:
        await create_reg_event(callback.from_user.id)
        flag = False
    else:
        flag = await check_completly_reg_event(callback.from_user.id)
    if flag:
        data = await state.get_data()
        name = data.get('name')
        event = await get_event(name)
        await safe_send_message(bot, callback, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                                               f"–ú—ã –≤–∞—Å –∂–¥–µ–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {event.desc}, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç {event.date} –≤ {event.time}\n"
                                               f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ - {event.place}\n\n"
                                               f"‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç!", reply_markup=get_ref_ikb(name))
        await state.clear()
    else:
        await safe_send_message(bot, callback, "–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è")
        await state.set_state(EventReg.waiting_name)


@router.message(EventReg.waiting_name)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'name': message.text})
    await safe_send_message(bot, message, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    await state.set_state(EventReg.waiting_surname)


@router.message(EventReg.waiting_surname)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'surname': message.text})
    await safe_send_message(bot, message, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
    await state.set_state(EventReg.waiting_fathername)


@router.message(EventReg.waiting_fathername)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'fathername': message.text})
    await safe_send_message(bot, message, '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω')
    await state.set_state(EventReg.waiting_phone)


@router.message(EventReg.waiting_phone)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'phone': message.text})
    await safe_send_message(bot, message, '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –ø–æ—á—Ç—É')
    await state.set_state(EventReg.waiting_mail)


@router.message(EventReg.waiting_mail)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'mail': message.text})
    await safe_send_message(bot, message, '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≤—É–∑–∞/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    await state.set_state(EventReg.waiting_org)


@router.message(EventReg.waiting_org)
async def reg_event_part3(message: Message, state: FSMContext):
    await update_reg_event(message.from_user.id, {'org': message.text})
    if await check_completly_reg_event(message.from_user.id):
        data = await state.get_data()
        name = data.get('name')
        event = await get_event(name)
        await safe_send_message(bot, message, f"–ú—ã –≤–∞—Å –∂–¥–µ–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ {event.desc}, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–π–¥–µ—Ç {event.date} –≤ {event.time}\n"
                                               f"–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ - {event.place}\n\n"
                                               f"‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç!",
                                reply_markup=get_ref_ikb(name))
    else:
        await safe_send_message(bot, message, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n'
                                              '–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ')
    await state.clear()


@router.message(Command("info"))
async def cmd_info(message: Message):
    user = await get_user(message.from_user.id)
    if user.is_superuser:
        await safe_send_message(bot, message, text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                                                   "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                                                   "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞–¥–∞—Ö\n"
                                                   "/quest - –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥—É\n"
                                                   "/get_ref - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ\n"
                                                   "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—Å\n"
                                                   "/top - —Ç–æ–ø 10 –ø–æ –≤–ª–∞–¥–µ–Ω–∏—é –º–æ–Ω–µ—Ç–∫–∞–∏–º\n"
                                                   "/send_stat - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n"
                                                   "/send_post - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                                                   "/add_event - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
                                                   "/end_event - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
                                                   "/get_link - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ\n"
                                                   "/create_give_away - —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞\n"
                                                   "/get_result - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ\n"
                                                   "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º https://clck.ru/3EwSJM",
                                reply_markup=single_command_button_keyboard())
    else:
        await safe_send_message(bot, message, text="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                                                   "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                                                   "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞–¥–∞—Ö\n"
                                                   "/quest - –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥—É\n"
                                                   "/get_ref - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ\n"
                                                   "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—Å\n"
                                                   "/top - —Ç–æ–ø 10 –ø–æ –≤–ª–∞–¥–µ–Ω–∏—é –º–æ–Ω–µ—Ç–∫–∞–∏–º",
                                reply_markup=single_command_button_keyboard())


@router.message(Command('profile'))
async def cmd_profile(message: Message):
    user = await get_user(message.from_user.id)
    name = message.from_user.first_name if message.from_user.first_name else message.from_user.username
    rank = await get_user_rank_by_money(message.from_user.id)
    msg = f'–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {user.event_cnt}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–¥—Ä—è–¥: {user.strick}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.ref_cnt}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç–æ–∫: {user.money}\n–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {rank}'
    await safe_send_message(bot, message, msg, reply_markup=top_ikb())


@router.callback_query(F.data == 'top')
async def top_inline(message: Message):
    await cmd_top(message)


@router.message(Command('top'))
async def cmd_top(message: Message):
    top = await get_top_10_users_by_money()
    msg = ''
    flag = True
    for i in range(len(top)):
        if top[i].id == message.from_user.id:
            flag = False
            msg += f'{i+1}. –í—ã - {top[i].money}\n'
        else:
            msg += f'{i+1}. {top[i].handler} - {top[i].money}\n'
    if flag:
        rank = await get_user_rank_by_money(message.from_user.id)
        user = await get_user(message.from_user.id)
        msg += f"\n{rank}. –í—ã - {user.money}"
    await safe_send_message(bot, message, msg)


@router.message(Command("get_ref"))
async def get_ref_v2_part1(message: Message):
    events = await get_all_user_events(message.from_user.id)
    if not events:
        await safe_send_message(bot, message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–∏–∫—É–¥–∞ "
                                              "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å", reply_markup=single_command_button_keyboard())
        return
    await safe_send_message(bot, message, "–í—ã–±–µ—Ä–µ—Ç–∏ —Å–æ–±—ã—Ç–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
                            reply_markup=events_ikb(events))


@router.callback_query()
async def get_ref_v2_part2(callback: CallbackQuery):
    event = await get_event(callback.data)
    data = f'ref_{event.name}__{callback.from_user.id}'
    url = f"https://t.me/HSE_SPB_Business_Club_Bot?start={data}"  # TODO: after 04_12 event url = await create_start_link(bot, data, encode=True)
    # short_url = await make_short_link(url)
    # if short_url:
    await safe_send_message(bot, callback, f"–í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–µ {event.desc}:\n"
                                           f"{url}", reply_markup=single_command_button_keyboard()
                            )
    # else:
    #     await safe_send_message(bot, callback, "–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ", reply_markup=single_command_button_keyboard())

